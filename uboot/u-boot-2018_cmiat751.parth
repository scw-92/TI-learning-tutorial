diff -uNr u-boot-2018/arch/arm/include/asm/arch-am33xx/ddr_defs.h u-boot-2018_cmiat751/arch/arm/include/asm/arch-am33xx/ddr_defs.h
--- u-boot-2018/arch/arm/include/asm/arch-am33xx/ddr_defs.h	2018-11-23 11:46:32.999616360 +0800
+++ u-boot-2018_cmiat751/arch/arm/include/asm/arch-am33xx/ddr_defs.h	2018-11-22 17:07:01.636216636 +0800
@@ -123,6 +123,44 @@
 #define MT41K256M16HA125E_PHY_FIFO_WE		0x94
 #define MT41K256M16HA125E_IOCTRL_VALUE		0x18B
 
+/* Micron MT41K256M8DA-125 on MityARM335x */
+#define MT41K256M8DA125_EMIF_READ_LATENCY   0x07
+#define MT41K256M8DA125_EMIF_TIM1           0x0AAAD4DB
+#define MT41K256M8DA125_EMIF_TIM2           0x26437FDA
+#define MT41K256M8DA125_EMIF_TIM3           0x501F83FF
+#define MT41K256M8DA125_EMIF_SDCFG          0x61C05332
+#define MT41K256M8DA125_EMIF_SDREF          0x00000C30
+#define MT41K256M8DA125_ZQ_CFG              0x50074BE4
+#define MT41K256M8DA125_DLL_LOCK_DIFF       0x1
+#define MT41K256M8DA125_RATIO               0x80
+#define MT41K256M8DA125_INVERT_CLKOUT       0x0
+#define MT41K256M8DA125_RD_DQS              0x34
+#define MT41K256M8DA125_WR_DQS              0x5A
+#define MT41K256M8DA125_PHY_WR_DATA         0x91
+#define MT41K256M8DA125_PHY_FIFO_WE         0xA3
+#define MT41K256M8DA125_IOCTRL_VALUE        0x18B
+#define MT41K256M8DA125_PHY_RANK0_DELAY     0x1
+
+
+
+/* Micron MT41K256M16HA-125E */
+#define MT41K256M16HA125E_EMIF_READ_LATENCY 0x100007
+#define MT41K256M16HA125E_EMIF_TIM1     0x0AAAD4DB
+#define MT41K256M16HA125E_EMIF_TIM2     0x266B7FDA
+#define MT41K256M16HA125E_EMIF_TIM3     0x501F867F
+#define MT41K256M16HA125E_EMIF_SDCFG        0x61C05332
+#define MT41K256M16HA125E_EMIF_SDREF        0xC30
+#define MT41K256M16HA125E_ZQ_CFG        0x50074BE4
+#define MT41K256M16HA125E_RATIO         0x80
+#define MT41K256M16HA125E_INVERT_CLKOUT     0x0
+#define MT41K256M16HA125E_RD_DQS        0x38
+#define MT41K256M16HA125E_WR_DQS        0x44
+#define MT41K256M16HA125E_PHY_WR_DATA       0x7D
+#define MT41K256M16HA125E_PHY_FIFO_WE       0x94
+#define MT41K256M16HA125E_IOCTRL_VALUE      0x18B
+
+
+
 /* Micron MT41J512M8RH-125 on EVM v1.5 */
 #define MT41J512M8RH125_EMIF_READ_LATENCY	0x100006
 #define MT41J512M8RH125_EMIF_TIM1		0x0888A39B
diff -uNr u-boot-2018/arch/arm/Kconfig u-boot-2018_cmiat751/arch/arm/Kconfig
--- u-boot-2018/arch/arm/Kconfig	2018-11-23 11:46:32.999616360 +0800
+++ u-boot-2018_cmiat751/arch/arm/Kconfig	2018-11-22 16:50:03.360216636 +0800
@@ -1352,6 +1352,7 @@
 source "board/toradex/colibri_pxa270/Kconfig"
 source "board/technologic/ts4600/Kconfig"
 source "board/vscom/baltos/Kconfig"
+source "board/cmi_at751/Kconfig"
 source "board/woodburn/Kconfig"
 source "board/work-microwave/work_92105/Kconfig"
 source "board/zipitz2/Kconfig"
diff -uNr u-boot-2018/arch/arm/mach-omap2/am33xx/Kconfig u-boot-2018_cmiat751/arch/arm/mach-omap2/am33xx/Kconfig
--- u-boot-2018/arch/arm/mach-omap2/am33xx/Kconfig	2018-11-23 11:46:32.999616360 +0800
+++ u-boot-2018_cmiat751/arch/arm/mach-omap2/am33xx/Kconfig	2018-11-22 16:51:46.840216636 +0800
@@ -68,6 +68,13 @@
 	select DM_SERIAL
 	select DM_GPIO
 
+config TARGET_CMI_AT751
+	bool "Support cmi_at751"
+	select BOARD_LATE_INIT
+	select DM
+	select DM_SERIAL
+	select DM_GPIO
+
 config TARGET_AM335X_IGEP003X
 	bool "Support am335x_igep003x"
 	select BOARD_LATE_INIT
diff -uNr u-boot-2018/board/cmi_at751/board.c u-boot-2018_cmiat751/board/cmi_at751/board.c
--- u-boot-2018/board/cmi_at751/board.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/board.c	2018-11-23 11:35:25.211616360 +0800
@@ -0,0 +1,566 @@
+/*
+ * board.c
+ *
+ * Board functions for TI AM335X based boards
+ *
+ * Copyright (C) 2011, Texas Instruments, Incorporated - http://www.ti.com/
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <errno.h>
+#include <libfdt.h>
+#include <spl.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/omap.h>
+#include <asm/arch/ddr_defs.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/mmc_host_def.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/mem.h>
+#include <asm/arch/mux.h>
+#include <asm/io.h>
+#include <asm/emif.h>
+#include <asm/gpio.h>
+#include <i2c.h>
+#include <miiphy.h>
+#include <cpsw.h>
+#include <power/tps65217.h>
+#include <power/tps65910.h>
+#include <environment.h>
+#include <watchdog.h>
+#include "board.h"
+#include <common.h>
+#include <autoboot.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* GPIO that controls power to DDR on EVM-SK */
+#define GPIO_TO_PIN(bank, gpio)        (32 * (bank) + (gpio))
+#define GPIO_DDR_VTT_EN		7
+#define DIP_S1			44
+
+static struct ctrl_dev *cdev = (struct ctrl_dev *)CTRL_DEVICE_BASE;
+
+#if 0
+static int baltos_set_console(void)
+{
+	int val, i, dips = 0;
+	char buf[7];
+
+	for (i = 0; i < 4; i++) {
+		sprintf(buf, "dip_s%d", i + 1);
+
+		if (gpio_request(DIP_S1 + i, buf)) {
+			printf("failed to export GPIO %d\n", DIP_S1 + i);
+			return 0;
+		}
+
+		if (gpio_direction_input(DIP_S1 + i)) {
+			printf("failed to set GPIO %d direction\n", DIP_S1 + i);
+			return 0;
+		}
+
+		val = gpio_get_value(DIP_S1 + i);
+		dips |= val << i;
+	}
+
+	printf("DIPs: 0x%1x\n", (~dips) & 0xf);
+
+	if ((dips & 0xf) == 0xe)
+		env_set("console", "ttyUSB0,115200n8");
+
+	return 0;
+}
+#endif
+
+static int read_eeprom(BSP_VS_HWPARAM *header)
+{
+	i2c_set_bus_num(0);
+
+	/* Check if baseboard eeprom is available */
+	if (i2c_probe(CONFIG_SYS_I2C_EEPROM_ADDR)) {
+		puts("Could not probe the EEPROM; something fundamentally "
+			"wrong on the I2C bus.\n");
+		return -ENODEV;
+	}
+
+	/* read the eeprom using i2c */
+	if (i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR, 0, 1, (uchar *)header,
+		     sizeof(BSP_VS_HWPARAM))) {
+		puts("Could not read the EEPROM; something fundamentally"
+			" wrong on the I2C bus.\n");
+		return -EIO;
+	}
+
+	if (header->Magic != 0xDEADBEEF) {
+
+		printf("Incorrect magic number (0x%x) in EEPROM\n",
+				header->Magic);
+
+		/* fill default values */
+		header->SystemId = 211;
+		header->MAC1[0] = 0x00;
+		header->MAC1[1] = 0x00;
+		header->MAC1[2] = 0x00;
+		header->MAC1[3] = 0x00;
+		header->MAC1[4] = 0x00;
+		header->MAC1[5] = 0x01;
+
+		header->MAC2[0] = 0x00;
+		header->MAC2[1] = 0x00;
+		header->MAC2[2] = 0x00;
+		header->MAC2[3] = 0x00;
+		header->MAC2[4] = 0x00;
+		header->MAC2[5] = 0x02;
+
+		header->MAC3[0] = 0x00;
+		header->MAC3[1] = 0x00;
+		header->MAC3[2] = 0x00;
+		header->MAC3[3] = 0x00;
+		header->MAC3[4] = 0x00;
+		header->MAC3[5] = 0x03;
+	}
+
+	return 0;
+}
+
+#if defined(CONFIG_SPL_BUILD) || defined(CONFIG_NOR_BOOT)
+
+static const struct ddr_data ddr3_baltos_data = {
+	.datardsratio0 = MT41K256M16HA125E_RD_DQS,
+	.datawdsratio0 = MT41K256M16HA125E_WR_DQS,
+	.datafwsratio0 = MT41K256M16HA125E_PHY_FIFO_WE,
+	.datawrsratio0 = MT41K256M16HA125E_PHY_WR_DATA,
+};
+
+static const struct cmd_control ddr3_baltos_cmd_ctrl_data = {
+	.cmd0csratio = MT41K256M16HA125E_RATIO,
+	.cmd0iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+
+	.cmd1csratio = MT41K256M16HA125E_RATIO,
+	.cmd1iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+
+	.cmd2csratio = MT41K256M16HA125E_RATIO,
+	.cmd2iclkout = MT41K256M16HA125E_INVERT_CLKOUT,
+};
+
+static struct emif_regs ddr3_baltos_emif_reg_data = {
+	.sdram_config = MT41K256M16HA125E_EMIF_SDCFG,
+	.ref_ctrl = MT41K256M16HA125E_EMIF_SDREF,
+	.sdram_tim1 = MT41K256M16HA125E_EMIF_TIM1,
+	.sdram_tim2 = MT41K256M16HA125E_EMIF_TIM2,
+	.sdram_tim3 = MT41K256M16HA125E_EMIF_TIM3,
+    .ocp_config = EMIF_OCP_CONFIG_CMI_AT751,
+	.zq_config = MT41K256M16HA125E_ZQ_CFG,
+	.emif_ddr_phy_ctlr_1 = MT41K256M16HA125E_EMIF_READ_LATENCY,
+};
+
+static const struct ddr_data ddr3_sbc7109_data = {
+	.datardsratio0 = MT41K256M8DA125_RD_DQS,
+    .datawdsratio0 = MT41K256M8DA125_WR_DQS,
+    .datafwsratio0 = MT41K256M8DA125_PHY_FIFO_WE,
+    .datawrsratio0 = MT41K256M8DA125_PHY_WR_DATA,
+};
+
+static const struct cmd_control ddr3_sbc7109_cmd_ctrl_data = {
+    .cmd0csratio = MT41K256M8DA125_RATIO,
+    .cmd0iclkout = MT41K256M8DA125_INVERT_CLKOUT,
+
+    .cmd1csratio = MT41K256M8DA125_RATIO,
+    .cmd1iclkout = MT41K256M8DA125_INVERT_CLKOUT,
+
+    .cmd2csratio = MT41K256M8DA125_RATIO,
+    .cmd2iclkout = MT41K256M8DA125_INVERT_CLKOUT,
+};
+
+static struct emif_regs ddr3_sbc7109_emif_reg_data = {
+	.sdram_config = MT41K256M8DA125_EMIF_SDCFG,
+	.ref_ctrl = MT41K256M8DA125_EMIF_SDREF,
+    .sdram_tim1 = MT41K256M8DA125_EMIF_TIM1,
+    .sdram_tim2 = MT41K256M8DA125_EMIF_TIM2,
+    .sdram_tim3 = MT41K256M8DA125_EMIF_TIM3,
+    .ocp_config = EMIF_OCP_CONFIG_CMI_AT751,
+    .zq_config = MT41K256M8DA125_ZQ_CFG,
+    .emif_ddr_phy_ctlr_1 = MT41K256M8DA125_EMIF_READ_LATENCY,
+};
+
+#ifdef CONFIG_SPL_OS_BOOT
+int spl_start_uboot(void)
+{
+	/* break into full u-boot on 'c' */
+	return (serial_tstc() && serial_getc() == 'c');
+}
+#endif
+
+#define OSC	(V_OSCK/1000000)
+const struct dpll_params dpll_ddr = {
+		266, OSC-1, 1, -1, -1, -1, -1};
+const struct dpll_params dpll_ddr_evm_sk = {
+		303, OSC-1, 1, -1, -1, -1, -1};
+const struct dpll_params dpll_ddr_baltos = {
+		400, OSC-1, 1, -1, -1, -1, -1};
+
+void am33xx_spl_board_init(void)
+{
+	int mpu_vdd;
+	int sil_rev;
+
+	/* Get the frequency */
+	dpll_mpu_opp100.m = am335x_get_efuse_mpu_max_freq(cdev);
+
+	/*
+	 * The GP EVM, IDK and EVM SK use a TPS65910 PMIC.  For all
+	 * MPU frequencies we support we use a CORE voltage of
+	 * 1.1375V.  For MPU voltage we need to switch based on
+	 * the frequency we are running at.
+	 */
+
+	printf("I2C speed: %d Hz\n", CONFIG_SYS_OMAP24_I2C_SPEED);
+
+	if (i2c_probe(TPS65910_CTRL_I2C_ADDR)) {
+		puts("i2c: cannot access TPS65910\n");
+		return;
+	}
+
+	/*
+	 * Depending on MPU clock and PG we will need a different
+	 * VDD to drive at that speed.
+	 */
+	sil_rev = readl(&cdev->deviceid) >> 28;
+	mpu_vdd = am335x_get_tps65910_mpu_vdd(sil_rev,
+					      dpll_mpu_opp100.m);
+
+	/* Tell the TPS65910 to use i2c */
+	tps65910_set_i2c_control();
+
+	/* First update MPU voltage. */
+	if (tps65910_voltage_update(MPU, mpu_vdd))
+		return;
+
+	/* Second, update the CORE voltage. */
+	if (tps65910_voltage_update(CORE, TPS65910_OP_REG_SEL_1_1_3))
+		return;
+
+	/* Set CORE Frequencies to OPP100 */
+	do_setup_dpll(&dpll_core_regs, &dpll_core_opp100);
+
+	/* Set MPU Frequency to what we detected now that voltages are set */
+	do_setup_dpll(&dpll_mpu_regs, &dpll_mpu_opp100);
+}
+
+const struct dpll_params *get_dpll_ddr_params(void)
+{
+	enable_i2c0_pin_mux();
+    i2c_set_bus_num(0);
+    gpio_direction_output(GPIO_TO_PIN(0,22),1); //COM0_MODE_0=1
+    gpio_direction_output(GPIO_TO_PIN(0,23),0); //COM0_MODE_1=0
+    gpio_direction_output(GPIO_TO_PIN(0,19),0); //COM0_TERM=0
+    gpio_direction_output(GPIO_TO_PIN(0,12),1); //LVDS_BLKT_ON=1
+
+    return &dpll_ddr_baltos;
+}
+
+void set_uart_mux_conf(void)
+{
+	enable_uart0_pin_mux();
+}
+
+void set_mux_conf_regs(void)
+{
+	enable_board_pin_mux();
+}
+
+const struct ctrl_ioregs ioregs_baltos = {
+	.cm0ioctl		= MT41K256M16HA125E_IOCTRL_VALUE,
+	.cm1ioctl		= MT41K256M16HA125E_IOCTRL_VALUE,
+	.cm2ioctl		= MT41K256M16HA125E_IOCTRL_VALUE,
+	.dt0ioctl		= MT41K256M16HA125E_IOCTRL_VALUE,
+	.dt1ioctl		= MT41K256M16HA125E_IOCTRL_VALUE,
+};
+
+const struct ctrl_ioregs ioregs_sbc7109 = {
+    .cm0ioctl       = MT41K256M8DA125_IOCTRL_VALUE,
+    .cm1ioctl       = MT41K256M8DA125_IOCTRL_VALUE,
+    .cm2ioctl       = MT41K256M8DA125_IOCTRL_VALUE,
+    .dt0ioctl       = MT41K256M8DA125_IOCTRL_VALUE,
+    .dt1ioctl       = MT41K256M8DA125_IOCTRL_VALUE,
+};
+
+
+void sdram_init(void)
+{
+    if (1)
+        config_ddr(400, &ioregs_sbc7109,
+                   &ddr3_sbc7109_data,
+                   &ddr3_sbc7109_cmd_ctrl_data,
+                   &ddr3_sbc7109_emif_reg_data, 0);
+    else
+        config_ddr(400, &ioregs_baltos,
+                   &ddr3_baltos_data,
+                   &ddr3_baltos_cmd_ctrl_data,
+                   &ddr3_baltos_emif_reg_data, 0);
+}
+#endif
+
+/*
+ * Basic board specific setup.  Pinmux has been handled already.
+ */
+int board_init(void)
+{
+#if defined(CONFIG_HW_WATCHDOG)
+	hw_watchdog_init();
+#endif
+
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x100;
+#if defined(CONFIG_NOR) || defined(CONFIG_NAND)
+	gpmc_init();
+#endif
+	return 0;
+}
+
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	int node, ret;
+	unsigned char mac_addr[6];
+	BSP_VS_HWPARAM header;
+
+	/* get production data */
+	if (read_eeprom(&header))
+		return 0;
+
+	/* setup MAC1 */
+	mac_addr[0] = header.MAC1[0];
+	mac_addr[1] = header.MAC1[1];
+	mac_addr[2] = header.MAC1[2];
+	mac_addr[3] = header.MAC1[3];
+	mac_addr[4] = header.MAC1[4];
+	mac_addr[5] = header.MAC1[5];
+
+
+	node = fdt_path_offset(blob, "/ocp/ethernet/slave@4a100200");
+	if (node < 0) {
+		printf("no /soc/fman/ethernet path offset\n");
+		return -ENODEV;
+	}
+
+	ret = fdt_setprop(blob, node, "mac-address", &mac_addr, 6);
+	if (ret) {
+		printf("error setting local-mac-address property\n");
+		return -ENODEV;
+	}
+
+	/* setup MAC2 */
+	mac_addr[0] = header.MAC2[0];
+	mac_addr[1] = header.MAC2[1];
+	mac_addr[2] = header.MAC2[2];
+	mac_addr[3] = header.MAC2[3];
+	mac_addr[4] = header.MAC2[4];
+	mac_addr[5] = header.MAC2[5];
+
+	node = fdt_path_offset(blob, "/ocp/ethernet/slave@4a100300");
+	if (node < 0) {
+		printf("no /soc/fman/ethernet path offset\n");
+		return -ENODEV;
+	}
+
+	ret = fdt_setprop(blob, node, "mac-address", &mac_addr, 6);
+	if (ret) {
+		printf("error setting local-mac-address property\n");
+		return -ENODEV;
+	}
+
+	printf("\nFDT was successfully setup\n");
+
+	return 0;
+}
+
+#if 0
+static struct module_pin_mux dip_pin_mux[] = {
+	{OFFSET(gpmc_ad12), (MODE(7) | RXACTIVE )},	/* GPIO1_12 */
+	{OFFSET(gpmc_ad13), (MODE(7)  | RXACTIVE )},	/* GPIO1_13 */
+	{OFFSET(gpmc_ad14), (MODE(7)  | RXACTIVE )},	/* GPIO1_14 */
+	{OFFSET(gpmc_ad15), (MODE(7)  | RXACTIVE )},	/* GPIO1_15 */
+	{-1},
+};
+#endif
+
+#ifdef CONFIG_BOARD_LATE_INIT
+int board_late_init(void)
+{
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	BSP_VS_HWPARAM header;
+	char model[4];
+
+	/* get production data */
+	/*
+	if (read_eeprom(&header)) {
+		strcpy(model, "211");
+	} else {
+		sprintf(model, "%d", header.SystemId);
+		if (header.SystemId == 215) {
+			configure_module_pin_mux(dip_pin_mux);
+			baltos_set_console();
+		}
+	}
+	env_set("board_name", model);
+	*/
+#endif
+
+	return 0;
+}
+#endif
+
+#if (defined(CONFIG_DRIVER_TI_CPSW) && !defined(CONFIG_SPL_BUILD)) || \
+	(defined(CONFIG_SPL_ETH_SUPPORT) && defined(CONFIG_SPL_BUILD))
+static void cpsw_control(int enabled)
+{
+	/* VTP can be added here */
+
+	return;
+}
+
+static struct cpsw_slave_data cpsw_slaves[] = {
+	{
+		.slave_reg_ofs	= 0x208,
+		.sliver_reg_ofs	= 0xd80,
+		.phy_addr	= 0,
+	},
+	{
+		.slave_reg_ofs	= 0x308,
+		.sliver_reg_ofs	= 0xdc0,
+		.phy_addr	= 7,
+	},
+};
+
+static struct cpsw_platform_data cpsw_data = {
+	.mdio_base		= CPSW_MDIO_BASE,
+	.cpsw_base		= CPSW_BASE,
+	.mdio_div		= 0xff,
+	.channels		= 8,
+	.cpdma_reg_ofs		= 0x800,
+	.slaves			= 2,
+	.slave_data		= cpsw_slaves,
+	.active_slave		= 1,
+	.ale_reg_ofs		= 0xd00,
+	.ale_entries		= 1024,
+	.host_port_reg_ofs	= 0x108,
+	.hw_stats_reg_ofs	= 0x900,
+	.bd_ram_ofs		= 0x2000,
+	.mac_control		= (1 << 5),
+	.control		= cpsw_control,
+	.host_port_num		= 0,
+	.version		= CPSW_CTRL_VERSION_2,
+};
+#endif
+
+#if ((defined(CONFIG_SPL_ETH_SUPPORT) || defined(CONFIG_SPL_USBETH_SUPPORT)) \
+		&& defined(CONFIG_SPL_BUILD)) || \
+	((defined(CONFIG_DRIVER_TI_CPSW) || \
+	  defined(CONFIG_USB_ETHER) && defined(CONFIG_USB_MUSB_GADGET)) && \
+	 !defined(CONFIG_SPL_BUILD))
+int board_eth_init(bd_t *bis)
+{
+	int rv, n = 0;
+	uint8_t mac_addr[6];
+	uint32_t mac_hi, mac_lo;
+	__maybe_unused struct am335x_baseboard_id header;
+
+	/*
+	 * Note here that we're using CPSW1 since that has a 1Gbit PHY while
+	 * CSPW0 has a 100Mbit PHY.
+	 *
+	 * On product, CPSW1 maps to port labeled WAN.
+	 */
+
+	/* try reading mac address from efuse */
+	mac_lo = readl(&cdev->macid1l);
+	mac_hi = readl(&cdev->macid1h);
+	mac_addr[0] = mac_hi & 0xFF;
+	mac_addr[1] = (mac_hi & 0xFF00) >> 8;
+	mac_addr[2] = (mac_hi & 0xFF0000) >> 16;
+	mac_addr[3] = (mac_hi & 0xFF000000) >> 24;
+	mac_addr[4] = mac_lo & 0xFF;
+	mac_addr[5] = (mac_lo & 0xFF00) >> 8;
+
+#if (defined(CONFIG_DRIVER_TI_CPSW) && !defined(CONFIG_SPL_BUILD)) || \
+	(defined(CONFIG_SPL_ETH_SUPPORT) && defined(CONFIG_SPL_BUILD))
+	if (!env_get("ethaddr")) {
+		printf("<ethaddr> not set. Validating first E-fuse MAC\n");
+
+		if (is_valid_ethaddr(mac_addr))
+			eth_env_set_enetaddr("ethaddr", mac_addr);
+	}
+
+#ifdef CONFIG_DRIVER_TI_CPSW
+	writel((GMII1_SEL_RMII | GMII2_SEL_RGMII | RGMII2_IDMODE), &cdev->miisel);
+	cpsw_slaves[1].phy_if = PHY_INTERFACE_MODE_RGMII;
+	rv = cpsw_register(&cpsw_data);
+	if (rv < 0)
+		printf("Error %d registering CPSW switch\n", rv);
+	else
+		n += rv;
+#endif
+
+	/*
+	 *
+	 * CPSW RGMII Internal Delay Mode is not supported in all PVT
+	 * operating points.  So we must set the TX clock delay feature
+	 * in the AR8051 PHY.  Since we only support a single ethernet
+	 * device in U-Boot, we only do this for the first instance.
+	 */
+#define AR8051_PHY_DEBUG_ADDR_REG	0x1d
+#define AR8051_PHY_DEBUG_DATA_REG	0x1e
+#define AR8051_DEBUG_RGMII_CLK_DLY_REG	0x5
+#define AR8051_RGMII_TX_CLK_DLY		0x100
+	const char *devname;
+	devname = miiphy_get_current_dev();
+
+	miiphy_write(devname, 0x7, AR8051_PHY_DEBUG_ADDR_REG,
+			AR8051_DEBUG_RGMII_CLK_DLY_REG);
+	miiphy_write(devname, 0x7, AR8051_PHY_DEBUG_DATA_REG,
+			AR8051_RGMII_TX_CLK_DLY);
+#endif
+
+#if defined(CONFIG_USB_ETHER) && \
+    (!defined(CONFIG_SPL_BUILD) || defined(CONFIG_SPL_USBETH_SUPPORT))
+    if (is_valid_ethaddr(mac_addr))
+        eth_env_set_enetaddr("usbnet_devaddr", mac_addr);
+
+    rv = usb_eth_initialize(bis);
+    if (rv < 0)
+        printf("Error %d registering USB_ETHER\n", rv);
+    else
+        n += rv;
+#endif
+
+	return n;
+}
+#endif
+
+
+int misc_init_r(void)
+{
+    //printf("-------------------------------0x80000000: %d\n", *((uint *)0x80000000));
+
+#ifdef AUTO_UPDATESYS
+    if(*((uint *)0x80000000) == 8)
+    {
+        run_command("run auto_update_nand", 0);
+        while(1)
+            udelay(1000);
+    }
+#endif
+
+    if(*((uint *)0x80000000) == 8)
+        env_set("bootdev", "MMC");
+    else if(*((uint *)0x80000000) == 5)
+        env_set("bootdev", "NAND");
+    else
+        printf("Boot device don't exist\n");
+
+    return 0;
+}
diff -uNr u-boot-2018/board/cmi_at751/board.h u-boot-2018_cmiat751/board/cmi_at751/board.h
--- u-boot-2018/board/cmi_at751/board.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/board.h	2018-11-22 16:58:30.184216636 +0800
@@ -0,0 +1,94 @@
+/*
+ * board.h
+ *
+ * TI AM335x boards information header
+ *
+ * Copyright (C) 2011, Texas Instruments, Incorporated - http://www.ti.com/
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _BOARD_H_
+#define _BOARD_H_
+
+/*
+ * TI AM335x parts define a system EEPROM that defines certain sub-fields.
+ * We use these fields to in turn see what board we are on, and what
+ * that might require us to set or not set.
+ */
+#define HDR_NO_OF_MAC_ADDR	3
+#define HDR_ETH_ALEN		6
+#define HDR_NAME_LEN		8
+
+//#define EMIF_OCP_CONFIG_CMI_AT751                     0x003d3d3d
+#define EMIF_OCP_CONFIG_CMI_AT751               0x00141414
+
+
+struct am335x_baseboard_id {
+	unsigned int  magic;
+	char name[HDR_NAME_LEN];
+	char version[4];
+	char serial[12];
+	char config[32];
+	char mac_addr[HDR_NO_OF_MAC_ADDR][HDR_ETH_ALEN];
+};
+
+typedef struct _BSP_VS_HWPARAM    // v1.0
+{
+	uint32_t Magic;
+	uint32_t HwRev;
+	uint32_t SerialNumber;
+	char PrdDate[11];    // as a string ie. "01.01.2006"
+	uint16_t SystemId;
+	uint8_t MAC1[6];        // internal EMAC
+	uint8_t MAC2[6];        // SMSC9514
+	uint8_t MAC3[6];        // WL1271 WLAN
+} __attribute__ ((packed)) BSP_VS_HWPARAM;
+
+static inline int board_is_bone(struct am335x_baseboard_id *header)
+{
+	return !strncmp(header->name, "A335BONE", HDR_NAME_LEN);
+}
+
+static inline int board_is_bone_lt(struct am335x_baseboard_id *header)
+{
+	return !strncmp(header->name, "A335BNLT", HDR_NAME_LEN);
+}
+
+static inline int board_is_evm_sk(struct am335x_baseboard_id *header)
+{
+	return !strncmp("A335X_SK", header->name, HDR_NAME_LEN);
+}
+
+static inline int board_is_idk(struct am335x_baseboard_id *header)
+{
+	return !strncmp(header->config, "SKU#02", 6);
+}
+
+static inline int board_is_gp_evm(struct am335x_baseboard_id *header)
+{
+	return !strncmp("A33515BB", header->name, HDR_NAME_LEN);
+}
+
+static inline int board_is_evm_15_or_later(struct am335x_baseboard_id *header)
+{
+	return (board_is_gp_evm(header) &&
+		strncmp("1.5", header->version, 3) <= 0);
+}
+
+/*
+ * We have three pin mux functions that must exist.  We must be able to enable
+ * uart0, for initial output and i2c0 to read the main EEPROM.  We then have a
+ * main pinmux function that can be overridden to enable all other pinmux that
+ * is required on the board.
+ */
+void enable_uart0_pin_mux(void);
+void enable_uart1_pin_mux(void);
+void enable_uart2_pin_mux(void);
+void enable_uart3_pin_mux(void);
+void enable_uart4_pin_mux(void);
+void enable_uart5_pin_mux(void);
+void enable_i2c0_pin_mux(void);
+void enable_i2c1_pin_mux(void);
+void enable_board_pin_mux(void);
+#endif
diff -uNr u-boot-2018/board/cmi_at751/Kconfig u-boot-2018_cmiat751/board/cmi_at751/Kconfig
--- u-boot-2018/board/cmi_at751/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/Kconfig	2018-11-22 16:46:18.756216636 +0800
@@ -0,0 +1,21 @@
+if TARGET_CMI_AT751
+
+config SYS_BOARD
+	default "cmi_at751"
+
+config SYS_SOC
+	default "am33xx"
+
+config SYS_CONFIG_NAME
+	default "cmi_at751"
+
+config CONS_INDEX
+	int "UART used for console"
+	range 1 6
+	default 1
+	help
+	  The AM335x SoC has a total of 6 UARTs (UART0 to UART5 as referenced
+	  in documentation, etc) available to it.  Depending on your specific
+	  board you may want something other than UART0.
+
+endif
diff -uNr u-boot-2018/board/cmi_at751/MAINTAINERS u-boot-2018_cmiat751/board/cmi_at751/MAINTAINERS
--- u-boot-2018/board/cmi_at751/MAINTAINERS	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/MAINTAINERS	2018-11-22 16:44:46.452216636 +0800
@@ -0,0 +1,6 @@
+BALTOS BOARD
+M:	Yegor Yefremov <yegorslists@googlemail.com>
+S:	Maintained
+F:	board/vscom/baltos/
+F:	include/configs/baltos.h
+F:	configs/am335x_baltos_defconfig
diff -uNr u-boot-2018/board/cmi_at751/Makefile u-boot-2018_cmiat751/board/cmi_at751/Makefile
--- u-boot-2018/board/cmi_at751/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/Makefile	2018-11-22 16:44:46.452216636 +0800
@@ -0,0 +1,13 @@
+#
+# Makefile
+#
+# Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+ifeq ($(CONFIG_SKIP_LOWLEVEL_INIT),)
+obj-y	:= mux.o
+endif
+
+obj-y	+= board.o
diff -uNr u-boot-2018/board/cmi_at751/mux.c u-boot-2018_cmiat751/board/cmi_at751/mux.c
--- u-boot-2018/board/cmi_at751/mux.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/mux.c	2018-11-22 16:58:40.448216636 +0800
@@ -0,0 +1,187 @@
+/*
+ * mux.c
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/mux.h>
+#include <asm/io.h>
+#include <i2c.h>
+#include "board.h"
+
+static struct module_pin_mux uart0_pin_mux[] = {
+	{OFFSET(uart0_rxd), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* UART0_RXD */
+    {OFFSET(uart0_txd), (MODE(0) | PULLUDEN | PULLUP_EN)},		/* UART0_TXD */
+    {OFFSET(gpmc_ad8), (MODE(7) | PULLUDEN | PULLUP_EN)},       /* COM0_MODE_0 */
+    {OFFSET(gpmc_ad9), (MODE(7) | PULLUDEN | PULLDOWN_EN)},     /* COM0_MODE_1 */
+    {OFFSET(xdma_event_intr0), (MODE(7) | PULLUDEN | PULLDOWN_EN)}, /* COM0_TERM */
+	{-1},
+};
+
+static struct module_pin_mux uart1_pin_mux[] = {
+	{OFFSET(uart1_rxd), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* UART1_RXD */
+	{OFFSET(uart1_txd), (MODE(0) | PULLUDEN)},		/* UART1_TXD */
+	{-1},
+};
+
+static struct module_pin_mux uart2_pin_mux[] = {
+	{OFFSET(spi0_sclk), (MODE(1) | PULLUP_EN | RXACTIVE)},	/* UART2_RXD */
+	{OFFSET(spi0_d0), (MODE(1) | PULLUDEN)},		/* UART2_TXD */
+	{-1},
+};
+
+static struct module_pin_mux uart3_pin_mux[] = {
+	{OFFSET(spi0_cs1), (MODE(1) | PULLUP_EN | RXACTIVE)},	/* UART3_RXD */
+	{OFFSET(ecap0_in_pwm0_out), (MODE(1) | PULLUDEN)},	/* UART3_TXD */
+	{-1},
+};
+
+static struct module_pin_mux uart4_pin_mux[] = {
+	{OFFSET(gpmc_wait0), (MODE(6) | PULLUP_EN | RXACTIVE)},	/* UART4_RXD */
+	{OFFSET(gpmc_wpn), (MODE(6) | PULLUDEN)},		/* UART4_TXD */
+	{-1},
+};
+
+static struct module_pin_mux uart5_pin_mux[] = {
+	{OFFSET(lcd_data9), (MODE(4) | PULLUP_EN | RXACTIVE)},	/* UART5_RXD */
+	{OFFSET(lcd_data8), (MODE(4) | PULLUDEN)},		/* UART5_TXD */
+	{-1},
+};
+
+static struct module_pin_mux mmc0_pin_mux[] = {
+	{OFFSET(mmc0_dat3), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_DAT3 */
+	{OFFSET(mmc0_dat2), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_DAT2 */
+	{OFFSET(mmc0_dat1), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_DAT1 */
+	{OFFSET(mmc0_dat0), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_DAT0 */
+	{OFFSET(mmc0_clk), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_CLK */
+	{OFFSET(mmc0_cmd), (MODE(0) | RXACTIVE | PULLUP_EN)},	/* MMC0_CMD */
+	//{OFFSET(spi0_cs1), (MODE(5) | RXACTIVE | PULLUP_EN)},	/* MMC0_CD */
+    {OFFSET(gpmc_clk), (MODE(7) | RXACTIVE)},   /* MMC0_CD */
+	{-1},
+};
+
+static struct module_pin_mux i2c0_pin_mux[] = {
+	{OFFSET(i2c0_sda), (MODE(0) | RXACTIVE |
+			PULLUDEN | SLEWCTRL)}, /* I2C_DATA */
+	{OFFSET(i2c0_scl), (MODE(0) | RXACTIVE |
+			PULLUDEN | SLEWCTRL)}, /* I2C_SCLK */
+	{-1},
+};
+
+static struct module_pin_mux i2c1_pin_mux[] = {
+	{OFFSET(spi0_d1), (MODE(2) | RXACTIVE |
+			PULLUDEN | SLEWCTRL)},	/* I2C_DATA */
+	{OFFSET(spi0_cs0), (MODE(2) | RXACTIVE |
+			PULLUDEN | SLEWCTRL)},	/* I2C_SCLK */
+	{-1},
+};
+
+static struct module_pin_mux rgmii1_pin_mux[] = {
+    {OFFSET(mii1_txen), MODE(2)},           /* RGMII1_TCTL */
+    {OFFSET(mii1_rxdv), MODE(2) | RXACTIVE},    /* RGMII1_RCTL */
+    {OFFSET(mii1_txd3), MODE(2)},           /* RGMII1_TD3 */
+    {OFFSET(mii1_txd2), MODE(2)},           /* RGMII1_TD2 */
+    {OFFSET(mii1_txd1), MODE(2)},           /* RGMII1_TD1 */
+    {OFFSET(mii1_txd0), MODE(2)},           /* RGMII1_TD0 */
+    {OFFSET(mii1_txclk), MODE(2)},          /* RGMII1_TCLK */
+    {OFFSET(mii1_rxclk), MODE(2) | RXACTIVE},   /* RGMII1_RCLK */
+    {OFFSET(mii1_rxd3), MODE(2) | RXACTIVE},    /* RGMII1_RD3 */
+    {OFFSET(mii1_rxd2), MODE(2) | RXACTIVE},    /* RGMII1_RD2 */
+    {OFFSET(mii1_rxd1), MODE(2) | RXACTIVE},    /* RGMII1_RD1 */
+    {OFFSET(mii1_rxd0), MODE(2) | RXACTIVE},    /* RGMII1_RD0 */
+    {OFFSET(mdio_data), MODE(0) | RXACTIVE | PULLUP_EN},/* MDIO_DATA */
+    {OFFSET(mdio_clk), MODE(0) | PULLUP_EN},    /* MDIO_CLK */
+    {-1},
+};
+
+
+static struct module_pin_mux nand_pin_mux[] = {
+	{OFFSET(gpmc_ad0), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD0 */
+	{OFFSET(gpmc_ad1), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD1 */
+	{OFFSET(gpmc_ad2), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD2 */
+	{OFFSET(gpmc_ad3), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD3 */
+	{OFFSET(gpmc_ad4), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD4 */
+	{OFFSET(gpmc_ad5), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD5 */
+	{OFFSET(gpmc_ad6), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD6 */
+	{OFFSET(gpmc_ad7), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND AD7 */
+	{OFFSET(gpmc_wait0), (MODE(0) | RXACTIVE | PULLUP_EN)}, /* NAND WAIT */
+	{OFFSET(gpmc_wpn), (MODE(0) | PULLUP_EN | RXACTIVE)},	/* NAND_WPN */
+	{OFFSET(gpmc_csn0), (MODE(0) | PULLUDEN)},	/* NAND_CS0 */
+	{OFFSET(gpmc_advn_ale), (MODE(0) | PULLUDEN)}, /* NAND_ADV_ALE */
+	{OFFSET(gpmc_oen_ren), (MODE(0) | PULLUDEN)},	/* NAND_OE */
+	{OFFSET(gpmc_wen), (MODE(0) | PULLUDEN)},	/* NAND_WEN */
+	{OFFSET(gpmc_be0n_cle), (MODE(0) | PULLUDEN)},	/* NAND_BE_CLE */
+	{-1},
+};
+
+void enable_uart0_pin_mux(void)
+{
+	configure_module_pin_mux(uart0_pin_mux);
+}
+
+void enable_uart1_pin_mux(void)
+{
+	configure_module_pin_mux(uart1_pin_mux);
+}
+
+void enable_uart2_pin_mux(void)
+{
+	configure_module_pin_mux(uart2_pin_mux);
+}
+
+void enable_uart3_pin_mux(void)
+{
+	configure_module_pin_mux(uart3_pin_mux);
+}
+
+void enable_uart4_pin_mux(void)
+{
+	configure_module_pin_mux(uart4_pin_mux);
+}
+
+void enable_uart5_pin_mux(void)
+{
+	configure_module_pin_mux(uart5_pin_mux);
+}
+
+void enable_i2c0_pin_mux(void)
+{
+	configure_module_pin_mux(i2c0_pin_mux);
+}
+
+void enable_i2c1_pin_mux(void)
+{
+	configure_module_pin_mux(i2c1_pin_mux);
+}
+
+static struct module_pin_mux gpio0_20_pin_mux[] = {
+    {OFFSET(xdma_event_intr1), MODE(7) | PULLUDEN | PULLUP_EN},
+    {-1},
+};
+
+void enable_board_pin_mux()
+{
+    configure_module_pin_mux(i2c0_pin_mux);
+    configure_module_pin_mux(i2c1_pin_mux);
+    configure_module_pin_mux(uart0_pin_mux);
+    configure_module_pin_mux(uart1_pin_mux);
+    configure_module_pin_mux(rgmii1_pin_mux);
+    configure_module_pin_mux(mmc0_pin_mux);
+    configure_module_pin_mux(gpio0_20_pin_mux);
+
+#if defined(CONFIG_NAND)
+	configure_module_pin_mux(nand_pin_mux);
+#endif
+}
diff -uNr u-boot-2018/board/cmi_at751/README u-boot-2018_cmiat751/board/cmi_at751/README
--- u-boot-2018/board/cmi_at751/README	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/README	2018-11-22 16:44:46.452216636 +0800
@@ -0,0 +1 @@
+BSP for VScom OnRISC Balios family devices, like Balios iR 5221.
diff -uNr u-boot-2018/board/cmi_at751/u-boot.lds u-boot-2018_cmiat751/board/cmi_at751/u-boot.lds
--- u-boot-2018/board/cmi_at751/u-boot.lds	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/board/cmi_at751/u-boot.lds	2018-11-22 16:52:53.492216636 +0800
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2004-2008 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x00000000;
+
+	. = ALIGN(4);
+	.text :
+	{
+		*(.__image_copy_start)
+		*(.vectors)
+		CPUDIR/start.o (.text*)
+		board/cmi_at751/built-in.o (.text*)
+		*(.text*)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+
+	. = ALIGN(4);
+	.data : {
+		*(.data*)
+	}
+
+	. = ALIGN(4);
+
+	. = .;
+
+	. = ALIGN(4);
+	.u_boot_list : {
+		KEEP(*(SORT(.u_boot_list*)));
+	}
+
+	. = ALIGN(4);
+
+	.image_copy_end :
+	{
+		*(.__image_copy_end)
+	}
+
+	.rel_dyn_start :
+	{
+		*(.__rel_dyn_start)
+	}
+
+	.rel.dyn : {
+		*(.rel*)
+	}
+
+	.rel_dyn_end :
+	{
+		*(.__rel_dyn_end)
+	}
+
+	.hash : { *(.hash*) }
+
+	.end :
+	{
+		*(.__end)
+	}
+
+	_image_binary_end = .;
+
+	/*
+	 * Deprecated: this MMU section is used by pxa at present but
+	 * should not be used by new boards/CPUs.
+	 */
+	. = ALIGN(4096);
+	.mmutable : {
+		*(.mmutable)
+	}
+
+/*
+ * Compiler-generated __bss_start and __bss_end, see arch/arm/lib/bss.c
+ * __bss_base and __bss_limit are for linker only (overlay ordering)
+ */
+
+	.bss_start __rel_dyn_start (OVERLAY) : {
+		KEEP(*(.__bss_start));
+		__bss_base = .;
+	}
+
+	.bss __bss_base (OVERLAY) : {
+		*(.bss*)
+		 . = ALIGN(4);
+		 __bss_limit = .;
+	}
+
+	.bss_end __bss_limit (OVERLAY) : {
+		KEEP(*(.__bss_end));
+	}
+
+	.dynsym _image_binary_end : { *(.dynsym) }
+	.dynbss : { *(.dynbss) }
+	.dynstr : { *(.dynstr*) }
+	.dynamic : { *(.dynamic*) }
+	.gnu.hash : { *(.gnu.hash) }
+	.plt : { *(.plt*) }
+	.interp : { *(.interp*) }
+	.gnu : { *(.gnu*) }
+	.ARM.exidx : { *(.ARM.exidx*) }
+}
diff -uNr u-boot-2018/common/spl/spl.c u-boot-2018_cmiat751/common/spl/spl.c
--- u-boot-2018/common/spl/spl.c	2018-11-23 11:46:33.003616360 +0800
+++ u-boot-2018_cmiat751/common/spl/spl.c	2018-11-23 10:17:29.415616360 +0800
@@ -315,7 +315,9 @@
 
 	for (entry = drv; entry != drv + n_ents; entry++) {
 		if (boot_device == entry->boot_device)
-			return entry;
+        {   
+            return entry;
+        }
 	}
 
 	/* Not found */
@@ -357,7 +359,10 @@
 			puts("SPL: Unsupported Boot Device!\n");
 #endif
 		if (loader && !spl_load_image(spl_image, loader))
-			return 0;
+        { 
+           *(uint *)0x80000000 =  loader->boot_device;
+           return 0;
+        }
 	}
 
 	return -ENODEV;
diff -uNr u-boot-2018/configs/cmi_at751_defconfig u-boot-2018_cmiat751/configs/cmi_at751_defconfig
--- u-boot-2018/configs/cmi_at751_defconfig	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/configs/cmi_at751_defconfig	2018-11-23 11:30:25.863616360 +0800
@@ -0,0 +1,60 @@
+CONFIG_ARM=y
+CONFIG_ARCH_OMAP2PLUS=y
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_AM33XX=y
+CONFIG_TARGET_CMI_AT751=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_LIBDISK_SUPPORT=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_SPL_FAT_SUPPORT=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_OF_BOARD_SETUP=y
+CONFIG_SYS_CONSOLE_INFO_QUIET=y
+CONFIG_VERSION_VARIABLE=y
+CONFIG_ARCH_MISC_INIT=y
+CONFIG_SPL=y
+CONFIG_SPL_EXT_SUPPORT=y
+CONFIG_SPL_I2C_SUPPORT=y
+CONFIG_SPL_MTD_SUPPORT=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_YMODEM_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_ASKENV=y
+CONFIG_CMD_EEPROM=y
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_NAND=y
+CONFIG_CMD_PART=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_MTDIDS_DEFAULT="nand0=omap2-nand.0"
+CONFIG_MTDPARTS_DEFAULT="mtdparts=omap2-nand.0:128k(SPL),128k(SPL.backup1),128k(SPL.backup2),128k(SPL.backup3),1920k(u-boot),-(UBI)"
+CONFIG_CMD_UBI=y
+CONFIG_ISO_PARTITION=y
+CONFIG_MMC_OMAP_HS=y
+CONFIG_NAND=y
+CONFIG_PHYLIB=y
+CONFIG_SYS_NS16550=y
+CONFIG_OMAP3_SPI=y
+CONFIG_USB=y
+CONFIG_USB_MUSB_HOST=y
+CONFIG_USB_MUSB_GADGET=y
+CONFIG_USB_STORAGE=y
+CONFIG_FAT_WRITE=y
+CONFIG_OF_LIBFDT=y
diff -uNr u-boot-2018/drivers/mtd/nand/nand_base.c u-boot-2018_cmiat751/drivers/mtd/nand/nand_base.c
--- u-boot-2018/drivers/mtd/nand/nand_base.c	2018-11-23 11:46:33.003616360 +0800
+++ u-boot-2018_cmiat751/drivers/mtd/nand/nand_base.c	2018-11-23 11:19:38.191616360 +0800
@@ -45,7 +45,7 @@
 #endif
 #include <asm/io.h>
 #include <linux/errno.h>
-
+static void show_process(unsigned long a, unsigned long b);
 /* Define default oob placement schemes for large and small page devices */
 static struct nand_ecclayout nand_oob_8 = {
 	.eccbytes = 3,
@@ -1834,7 +1834,7 @@
 
 		if (!readlen)
 			break;
-
+       // show_process(ops->len - readlen, ops->len);
 		/* For subsequent reads align to page boundary */
 		col = 0;
 		/* Increment page address */
@@ -2511,8 +2511,28 @@
 	return NULL;
 }
 
+
 #define NOTALIGNED(x)	((x & (chip->subpagesize - 1)) != 0)
 
+static void show_process(unsigned long a, unsigned long b)
+{
+    static int last_percent = 100;
+    int percent = 0;
+
+    percent = a / (b / 100);
+
+    if (percent != last_percent)
+    {
+        printf("\r%02d%% complete", percent);
+    }
+    else
+    {
+        printf("\n");
+    }
+}
+
+
+
 /**
  * nand_do_write_ops - [INTERN] NAND write with ECC
  * @mtd: MTD device structure
@@ -2617,6 +2637,7 @@
 		if (!writelen)
 			break;
 
+        show_process(ops->len - writelen, ops->len);
 		column = 0;
 		buf += bytes;
 		realpage++;
diff -uNr u-boot-2018/include/configs/cmi_at751.h u-boot-2018_cmiat751/include/configs/cmi_at751.h
--- u-boot-2018/include/configs/cmi_at751.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot-2018_cmiat751/include/configs/cmi_at751.h	2018-11-23 11:28:28.631616360 +0800
@@ -0,0 +1,325 @@
+/*
+ * am335x_evm.h
+ *
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __CONFIG_BALTOS_H
+#define __CONFIG_BALTOS_H
+
+#include <linux/sizes.h>
+#include <configs/ti_am335x_common.h>
+
+
+/* #define DEBUG */
+
+
+
+
+
+#define MACH_TYPE_TIAM335EVM		3589	/* Until the next sync */
+#define CONFIG_MACH_TYPE		MACH_TYPE_TIAM335EVM
+#define AUTO_UPDATESYS 1
+
+/* Clock Defines */
+#define V_OSCK				24000000  /* Clock output from T2 */
+#define V_SCLK				(V_OSCK)
+
+/* Custom script for NOR */
+#define CONFIG_SYS_LDSCRIPT		"board/cmi_at751/u-boot.lds"
+
+/* Always 128 KiB env size */
+#define CONFIG_ENV_SIZE			(128 << 10)
+
+/* Enhance our eMMC support / experience. */
+
+
+
+
+
+/* FIT support */
+#define CONFIG_SYS_BOOTM_LEN         SZ_64M
+
+/* UBI Support */
+
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_MTD_DEVICE
+
+
+
+
+
+/* I2C configuration */
+#undef CONFIG_SYS_OMAP24_I2C_SPEED
+#define CONFIG_SYS_OMAP24_I2C_SPEED 1000
+
+
+#ifdef CONFIG_NAND
+#define CONFIG_SYS_NAND_U_BOOT_OFFS	0x00080000
+#ifdef CONFIG_SPL_OS_BOOT
+#define CONFIG_CMD_SPL_NAND_OFS 0x00080000 /* os parameters */
+#define CONFIG_SYS_NAND_SPL_KERNEL_OFFS 0x00200000 /* kernel offset */
+
+#endif
+#define NANDARGS \
+	"mtdids=" CONFIG_MTDIDS_DEFAULT "\0" \
+	"mtdparts=" CONFIG_MTDPARTS_DEFAULT "\0" \
+	"nandargs=setenv bootargs console=ttyO0,115200n8 init=/sbin/init mem=512M vram=50M"\
+		"${optargs} " \
+		"root=${nandroot} " \
+		"rootfstype=${nandrootfstype}\0" \
+	"nandroot=ubi0:rootfs rw ubi.mtd=4,2048\0" \
+	"nandrootfstype=ubifs rootwait=1\0" \
+	"nandboot=echo Booting from nand ...; " \
+		"run nandargs; " \
+		"setenv loadaddr 0x82000000; " \
+        "setenv fdtaddr 0x88000000; "\
+        "nand read ${loadaddr} 0x280000 0x1480000; "\
+        "nand read ${fdtaddr} 0x1700000 0x20000; "\
+		"bootz ${loadaddr} - ${fdtaddr} ;\0"
+#else
+#define NANDARGS ""
+#endif
+
+#define CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+
+#ifndef CONFIG_SPL_BUILD
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	DEFAULT_LINUX_BOOT_ENV \
+	"boot_fdt=try\0" \
+	"bootpart=0:2\0" \
+	"bootdir=/boot\0" \
+	"bootfile=zImage\0" \
+	"fdtfile=undefined\0" \
+	"console=ttyO0,115200n8\0" \
+	"optargs=\0" \
+	"mmcdev=0\0" \
+	"mmcroot=/dev/mmcblk0p2 ro\0" \
+	"mmcrootfstype=ext4 rootwait\0" \
+	"rootpath=/export/rootfs\0" \
+	"nfsopts=nolock\0" \
+	"static_ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}:${hostname}" \
+		"::off\0" \
+	"ramroot=/dev/ram0 rw\0" \
+	"ramrootfstype=ext2\0" \
+	"mmcargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"${mtdparts} " \
+		"root=${mmcroot} " \
+		"rootfstype=${mmcrootfstype}\0" \
+	"spiroot=/dev/mtdblock4 rw\0" \
+	"spirootfstype=jffs2\0" \
+	"spisrcaddr=0xe0000\0" \
+	"spiimgsize=0x362000\0" \
+	"spibusno=0\0" \
+	"spiargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=${spiroot} " \
+		"rootfstype=${spirootfstype}\0" \
+	"netargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=/dev/nfs " \
+		"nfsroot=${serverip}:${rootpath},${nfsopts} rw " \
+		"ip=dhcp\0" \
+	"bootenv=uEnv.txt\0" \
+	"loadbootenv=load mmc ${mmcdev} ${loadaddr} ${bootenv}\0" \
+	"importbootenv=echo Importing environment from mmc ...; " \
+		"env import -t $loadaddr $filesize\0" \
+	"ramargs=setenv bootargs console=${console} " \
+		"${optargs} " \
+		"root=${ramroot} " \
+		"rootfstype=${ramrootfstype}\0" \
+	"loadramdisk=load mmc ${mmcdev} ${rdaddr} ramdisk.gz\0" \
+	"loadimage=load mmc ${bootpart} ${loadaddr} ${bootdir}/${bootfile}\0" \
+	"loadfdt=load mmc ${bootpart} ${fdtaddr} ${bootdir}/${fdtfile}\0" \
+	"mmcloados=run mmcargs; " \
+		"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+			"if run loadfdt; then " \
+				"bootz ${loadaddr} - ${fdtaddr}; " \
+			"else " \
+				"if test ${boot_fdt} = try; then " \
+					"bootz; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi; " \
+		"else " \
+			"bootz; " \
+		"fi;\0" \
+	"mmcboot=mmc dev ${mmcdev}; " \
+		"if mmc rescan; then " \
+			"echo SD/MMC found on device ${mmcdev};" \
+			"if run loadbootenv; then " \
+				"echo Loaded environment from ${bootenv};" \
+				"run importbootenv;" \
+			"fi;" \
+			"if test -n $uenvcmd; then " \
+				"echo Running uenvcmd ...;" \
+				"run uenvcmd;" \
+			"fi;" \
+			"if run loadimage; then " \
+				"run mmcloados;" \
+			"fi;" \
+		"fi;\0" \
+	"spiboot=echo Booting from spi ...; " \
+		"run spiargs; " \
+		"sf probe ${spibusno}:0; " \
+		"sf read ${loadaddr} ${spisrcaddr} ${spiimgsize}; " \
+		"bootz ${loadaddr}\0" \
+	"netboot=echo Booting from network ...; " \
+		"setenv autoload no; " \
+		"dhcp; " \
+		"tftp ${loadaddr} ${bootfile}; " \
+		"tftp ${fdtaddr} ${fdtfile}; " \
+		"run netargs; " \
+		"bootz ${loadaddr} - ${fdtaddr}\0" \
+	"ramboot=echo Booting from ramdisk ...; " \
+		"run ramargs; " \
+		"bootz ${loadaddr} ${rdaddr} ${fdtaddr}\0" \
+	"findfdt=setenv fdtfile am335x-cmi_at751.dtb\0" \
+    "auto_update_nand= echo ------------------Begin update system to Nand -----------------;"\
+        "nand erase.chip ;mmc rescan;"\
+        "fatload mmc 0 81000000 MLO; nand write.i 81000000 0 $filesize; "\
+        "fatload mmc 0 81000000 u-boot.img; nand write.i 81000000 80000 $filesize; "\
+        "fatload mmc 0 81000000 zImage; nand write.i 81000000 280000 ${filesize}; "\
+        "fatload mmc 0 81000000 am335x-cmi_at751.dtb; nand write.i 81000000 1700000 ${filesize}; "\
+        "fatload mmc 0 81000000 ubi.img; nand write.i 81000000 1780000 ${filesize};"\
+        "echo ;"\
+        "led6 ;"\
+        "echo ------------------success update system to Nand -----------------;\0"\
+	NANDARGS
+	/*DFUARGS*/
+#endif
+
+#define CONFIG_BOOTCOMMAND \
+    "if test $bootdev = MMC; then "\
+	    "echo mmcboot;"\
+    "else "\
+        "run nandboot;"\
+    "fi;"
+
+/* NS16550 Configuration */
+#define CONFIG_SYS_NS16550_COM1		0x44e09000	/* Base EVM has UART0 */
+#define CONFIG_MISC_INIT_R
+
+
+
+
+
+
+#define CONFIG_ENV_EEPROM_IS_ON_I2C
+#define CONFIG_SYS_I2C_EEPROM_ADDR	0x50	/* Main EEPROM */
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN	2
+
+/* PMIC support */
+#define CONFIG_POWER_TPS65910
+
+/* SPL */
+#ifndef CONFIG_NOR_BOOT
+
+
+
+/* Bootcount using the RTC block */
+#define CONFIG_BOOTCOUNT_LIMIT
+#define CONFIG_BOOTCOUNT_AM33XX
+
+/* USB gadget RNDIS */
+/*#define CONFIG_SPL_MUSB_NEW_SUPPORT*/
+
+/* General network SPL, both CPSW and USB gadget RNDIS */
+/*#define CONFIG_SPL_NET_SUPPORT
+#define CONFIG_SPL_ENV_SUPPORT
+#define CONFIG_SPL_NET_VCI_STRING	"AM335x U-Boot SPL"*/
+
+
+#ifdef CONFIG_NAND
+
+
+
+#define CONFIG_SYS_NAND_5_ADDR_CYCLE
+#define CONFIG_SYS_NAND_PAGE_COUNT	(CONFIG_SYS_NAND_BLOCK_SIZE / \
+					 CONFIG_SYS_NAND_PAGE_SIZE)
+#define CONFIG_SYS_NAND_PAGE_SIZE	2048
+#define CONFIG_SYS_NAND_OOBSIZE		64
+#define CONFIG_SYS_NAND_BLOCK_SIZE	(128*1024)
+#define CONFIG_SYS_NAND_BAD_BLOCK_POS	NAND_LARGE_BADBLOCK_POS
+#define CONFIG_SYS_NAND_ECCPOS		{ 2, 3, 4, 5, 6, 7, 8, 9, \
+					 10, 11, 12, 13, 14, 15, 16, 17, \
+					 18, 19, 20, 21, 22, 23, 24, 25, \
+					 26, 27, 28, 29, 30, 31, 32, 33, \
+					 34, 35, 36, 37, 38, 39, 40, 41, \
+					 42, 43, 44, 45, 46, 47, 48, 49, \
+					 50, 51, 52, 53, 54, 55, 56, 57, }
+
+#define CONFIG_SYS_NAND_ECCSIZE		512
+#define CONFIG_SYS_NAND_ECCBYTES	14
+#define CONFIG_SYS_NAND_ONFI_DETECTION
+#define CONFIG_NAND_OMAP_ECCSCHEME	OMAP_ECC_BCH8_CODE_HW
+#define CONFIG_SYS_NAND_U_BOOT_START	CONFIG_SYS_TEXT_BASE
+#endif
+#endif
+
+/*
+ * USB configuration.  We enable MUSB support, both for host and for
+ * gadget.  We set USB0 as peripheral and USB1 as host, based on the
+ * board schematic and physical port wired to each.  Then for host we
+ * add mass storage support and for gadget we add both RNDIS ethernet
+ * and DFU.
+ */
+#define CONFIG_USB_MUSB_DSPS
+#define CONFIG_USB_MUSB_PIO_ONLY
+#define CONFIG_USB_MUSB_DISABLE_BULK_COMBINE_SPLIT
+#define CONFIG_AM335X_USB0
+#define CONFIG_AM335X_USB0_MODE	MUSB_HOST
+#define CONFIG_AM335X_USB1
+#define CONFIG_AM335X_USB1_MODE MUSB_OTG
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/* Network. */
+
+
+#define CONFIG_PHY_ADDR			0
+#define CONFIG_PHY_SMSC
+#define CONFIG_MII
+#define CONFIG_PHY_ATHEROS
+
+/* NAND support */
+#ifdef CONFIG_NAND
+#define GPMC_NAND_ECC_LP_x8_LAYOUT  1
+#endif
+#if 0
+#define AUTO_UPDATESYS   /* auto update system */
+#endif
+
+
+
+#endif	/* ! __CONFIG_BALTOS_H */
diff -uNr u-boot-2018/u-boot-2018_cmiat751.parth u-boot-2018_cmiat751/u-boot-2018_cmiat751.parth
--- u-boot-2018/u-boot-2018_cmiat751.parth	2018-11-23 11:45:55.967616360 +0800
+++ u-boot-2018_cmiat751/u-boot-2018_cmiat751.parth	1970-01-01 08:00:00.000000000 +0800
@@ -1,163 +0,0 @@
-diff -ur u-boot-2018/arch/arm/include/asm/arch-am33xx/ddr_defs.h u-boot-2018_cmiat751/arch/arm/include/asm/arch-am33xx/ddr_defs.h
---- u-boot-2018/arch/arm/include/asm/arch-am33xx/ddr_defs.h	2018-10-06 13:51:37.000000000 +0800
-+++ u-boot-2018_cmiat751/arch/arm/include/asm/arch-am33xx/ddr_defs.h	2018-11-22 17:07:01.636216636 +0800
-@@ -123,6 +123,44 @@
- #define MT41K256M16HA125E_PHY_FIFO_WE		0x94
- #define MT41K256M16HA125E_IOCTRL_VALUE		0x18B
- 
-+/* Micron MT41K256M8DA-125 on MityARM335x */
-+#define MT41K256M8DA125_EMIF_READ_LATENCY   0x07
-+#define MT41K256M8DA125_EMIF_TIM1           0x0AAAD4DB
-+#define MT41K256M8DA125_EMIF_TIM2           0x26437FDA
-+#define MT41K256M8DA125_EMIF_TIM3           0x501F83FF
-+#define MT41K256M8DA125_EMIF_SDCFG          0x61C05332
-+#define MT41K256M8DA125_EMIF_SDREF          0x00000C30
-+#define MT41K256M8DA125_ZQ_CFG              0x50074BE4
-+#define MT41K256M8DA125_DLL_LOCK_DIFF       0x1
-+#define MT41K256M8DA125_RATIO               0x80
-+#define MT41K256M8DA125_INVERT_CLKOUT       0x0
-+#define MT41K256M8DA125_RD_DQS              0x34
-+#define MT41K256M8DA125_WR_DQS              0x5A
-+#define MT41K256M8DA125_PHY_WR_DATA         0x91
-+#define MT41K256M8DA125_PHY_FIFO_WE         0xA3
-+#define MT41K256M8DA125_IOCTRL_VALUE        0x18B
-+#define MT41K256M8DA125_PHY_RANK0_DELAY     0x1
-+
-+
-+
-+/* Micron MT41K256M16HA-125E */
-+#define MT41K256M16HA125E_EMIF_READ_LATENCY 0x100007
-+#define MT41K256M16HA125E_EMIF_TIM1     0x0AAAD4DB
-+#define MT41K256M16HA125E_EMIF_TIM2     0x266B7FDA
-+#define MT41K256M16HA125E_EMIF_TIM3     0x501F867F
-+#define MT41K256M16HA125E_EMIF_SDCFG        0x61C05332
-+#define MT41K256M16HA125E_EMIF_SDREF        0xC30
-+#define MT41K256M16HA125E_ZQ_CFG        0x50074BE4
-+#define MT41K256M16HA125E_RATIO         0x80
-+#define MT41K256M16HA125E_INVERT_CLKOUT     0x0
-+#define MT41K256M16HA125E_RD_DQS        0x38
-+#define MT41K256M16HA125E_WR_DQS        0x44
-+#define MT41K256M16HA125E_PHY_WR_DATA       0x7D
-+#define MT41K256M16HA125E_PHY_FIFO_WE       0x94
-+#define MT41K256M16HA125E_IOCTRL_VALUE      0x18B
-+
-+
-+
- /* Micron MT41J512M8RH-125 on EVM v1.5 */
- #define MT41J512M8RH125_EMIF_READ_LATENCY	0x100006
- #define MT41J512M8RH125_EMIF_TIM1		0x0888A39B
-diff -ur u-boot-2018/arch/arm/Kconfig u-boot-2018_cmiat751/arch/arm/Kconfig
---- u-boot-2018/arch/arm/Kconfig	2018-10-06 13:51:37.000000000 +0800
-+++ u-boot-2018_cmiat751/arch/arm/Kconfig	2018-11-22 16:50:03.360216636 +0800
-@@ -1352,6 +1352,7 @@
- source "board/toradex/colibri_pxa270/Kconfig"
- source "board/technologic/ts4600/Kconfig"
- source "board/vscom/baltos/Kconfig"
-+source "board/cmi_at751/Kconfig"
- source "board/woodburn/Kconfig"
- source "board/work-microwave/work_92105/Kconfig"
- source "board/zipitz2/Kconfig"
-diff -ur u-boot-2018/arch/arm/mach-omap2/am33xx/Kconfig u-boot-2018_cmiat751/arch/arm/mach-omap2/am33xx/Kconfig
---- u-boot-2018/arch/arm/mach-omap2/am33xx/Kconfig	2018-10-06 13:51:37.000000000 +0800
-+++ u-boot-2018_cmiat751/arch/arm/mach-omap2/am33xx/Kconfig	2018-11-22 16:51:46.840216636 +0800
-@@ -68,6 +68,13 @@
- 	select DM_SERIAL
- 	select DM_GPIO
- 
-+config TARGET_CMI_AT751
-+	bool "Support cmi_at751"
-+	select BOARD_LATE_INIT
-+	select DM
-+	select DM_SERIAL
-+	select DM_GPIO
-+
- config TARGET_AM335X_IGEP003X
- 	bool "Support am335x_igep003x"
- 	select BOARD_LATE_INIT
-Only in u-boot-2018_cmiat751/board: cmi_at751
-diff -ur u-boot-2018/common/spl/spl.c u-boot-2018_cmiat751/common/spl/spl.c
---- u-boot-2018/common/spl/spl.c	2018-10-06 13:51:38.000000000 +0800
-+++ u-boot-2018_cmiat751/common/spl/spl.c	2018-11-23 10:17:29.415616360 +0800
-@@ -315,7 +315,9 @@
- 
- 	for (entry = drv; entry != drv + n_ents; entry++) {
- 		if (boot_device == entry->boot_device)
--			return entry;
-+        {   
-+            return entry;
-+        }
- 	}
- 
- 	/* Not found */
-@@ -357,7 +359,10 @@
- 			puts("SPL: Unsupported Boot Device!\n");
- #endif
- 		if (loader && !spl_load_image(spl_image, loader))
--			return 0;
-+        { 
-+           *(uint *)0x80000000 =  loader->boot_device;
-+           return 0;
-+        }
- 	}
- 
- 	return -ENODEV;
-Only in u-boot-2018_cmiat751/configs: cmi_at751_defconfig
-diff -ur u-boot-2018/drivers/mtd/nand/nand_base.c u-boot-2018_cmiat751/drivers/mtd/nand/nand_base.c
---- u-boot-2018/drivers/mtd/nand/nand_base.c	2018-10-06 13:51:39.000000000 +0800
-+++ u-boot-2018_cmiat751/drivers/mtd/nand/nand_base.c	2018-11-23 11:19:38.191616360 +0800
-@@ -45,7 +45,7 @@
- #endif
- #include <asm/io.h>
- #include <linux/errno.h>
--
-+static void show_process(unsigned long a, unsigned long b);
- /* Define default oob placement schemes for large and small page devices */
- static struct nand_ecclayout nand_oob_8 = {
- 	.eccbytes = 3,
-@@ -1834,7 +1834,7 @@
- 
- 		if (!readlen)
- 			break;
--
-+       // show_process(ops->len - readlen, ops->len);
- 		/* For subsequent reads align to page boundary */
- 		col = 0;
- 		/* Increment page address */
-@@ -2511,8 +2511,28 @@
- 	return NULL;
- }
- 
-+
- #define NOTALIGNED(x)	((x & (chip->subpagesize - 1)) != 0)
- 
-+static void show_process(unsigned long a, unsigned long b)
-+{
-+    static int last_percent = 100;
-+    int percent = 0;
-+
-+    percent = a / (b / 100);
-+
-+    if (percent != last_percent)
-+    {
-+        printf("\r%02d%% complete", percent);
-+    }
-+    else
-+    {
-+        printf("\n");
-+    }
-+}
-+
-+
-+
- /**
-  * nand_do_write_ops - [INTERN] NAND write with ECC
-  * @mtd: MTD device structure
-@@ -2617,6 +2637,7 @@
- 		if (!writelen)
- 			break;
- 
-+        show_process(ops->len - writelen, ops->len);
- 		column = 0;
- 		buf += bytes;
- 		realpage++;
-Only in u-boot-2018_cmiat751/include/configs: cmi_at751.h
